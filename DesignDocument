# Asignment 1
## The Public Interface
The public interface will allow the user to add new players, list their roster information, list their stats, record dhots, record goals and assits, record powerplay goals and assists, as well as relating that information in relation to a goalie, recording minutes played by a goalie, and recording shutouts with minutes played.

Read more about the classes below in the order of Player, Goalie, Skater, PlayerList, TeamReader, TeamWriter, TableFactory, Table, RosterTable, SkaterStatTable,  and GoalieStatTable.

### Player, Skater, and Goalie
Class Description - The Player superclass has 2 subclasses, Skater and Goalie. Both a Skater and a Goalie have the "Is A" relationship to 

Method Descriptions -
The methods in includes 3 constructors. The first is the `roster` constructor for the Player object that accepts the name, birthdate, hometown, weight, height, and position while goals, assists, powerplay goals (ppGoals), powerplay assists (ppAssists), shots are set initialy to 0. The second is the `recreation` constructor, which will take all of the player information including roster as well as the play information (goals, assists etc.). This constructor accepts name, birthdate, hometown, weight, height, position, assists, powerplay goals (ppGoals), powerplay assists (ppAssists), and shots. The third is the `copy` constructor, which will set all of the values in the new player to be the same as another. This method accepts an Player. All constructor methods return void.

There is a mutator for each of the following variables - goals (`addGoals`), assists (`addAssists`), ppGoals (`addPPGoals`), ppAssists (`addPPAssists`), and shots (`addShots`). These are used to update the player's roster information when the player scores points. All mutators return void. All accept an int value of their coresponding variable that will be added onto their existing value for that variable. 

There is an accessor for each of the following variables - goals (`getGoals`), assists (`getAssists`), ppGoals (`getPPGoals`), ppAssists (`getPPAssists`), shots (`getShots`), and shot percentage (`getShotsPer`). All of accessors return the value of their corresponding variable. 

The helper methods include `calcShotsPer`, `calcPoints`, and `calcPPPoints`.  `calcShotsPer` calculates the percentage of the shots that results in goals. This uses the calculation `percent = (shots * 1.0) / ((goals * 1.0)+(ppGoals * 1.0) *100.0`. the `calcShotsPer` method accepts no arguments and returns percent as a double. `calcPoints` calculates the total points for goals and assists. It accepts no arguments and returns points as an int. `calcPPPoints` calculates the total points for powerplay goals and powerplay assists. It accepts no arguments and returns points as an int. 

### Player List
Class Description -  Provides a description of the class, detailed description of the encapsulated information, detailed description of the role of the class and its interaction, and the assumptions made regarding the design of the class.
The Player List class manages reading in players from a file, adding them to an Array List, making changes to that Array List (including adding and removing players), as well as saving the new player list into its own text file. 

Method Descriptions - 

### Menu
Class Description -  Provides a description of the class, detailed description of the encapsulated information, detailed description of the role of the class and its interaction, and the assumptions made regarding the design of the class.

Method Descriptions - 

## Implementation Details
Provides a full description of the internal state of the class and for all methods there is a plan for implementation or an algorithm provided.
### Player
Player needs to store:
* pName - String
* birth - String
* homeTown - String
* weight - String
* height - String
* pNum - String
* position - Enum
* goals - int
* assists - int
* ppGoals - int
* ppAssists - int
* shots - int
* shotsPer - double
* points - int

#### Important Methods
* `ppPoints` Calculates the total points from ppGoals and ppAssists.
* `shotPer` Calculates the shots percentage by dividing (goals + ppGoals) by shots. 
* `points` Calculates total points goals + assists + ppGoals + ppAssist

### Player List
Player List needs to store:
* A variable - type
* A variable - type 

#### Important Methods
* `method name` Method description
* `method name` Method description

### Menu
Player List needs to store:
* A variable - type
* A variable - type 

#### Important Methods
* `method name` Method description
* `method name` Method description

