# Asignment 1
## The Public Interface
The public interface will allow the user to add new players, list their roster information, list their stats, record dhots, record goals and assits, record powerplay goals and assists, as well as relating that information in relation to a goalie, recording minutes played by a goalie, and recording shutouts with minutes played.

Read more about the classes below in the order of Player, Goalie, Skater, PlayerList, TeamReader, TeamWriter, TableFactory, Table, RosterTable, SkaterStatTable,  and GoalieStatTable.

### Player, Skater, and Goalie
Class Description - The Player abstract superclass has 2 subclasses, Skater and Goalie. Both a Skater and a Goalie have the "Is A" relationship to Player.

Methods - The methods of this class includes:
* Accessors for all common variables (name, date of birth, hometown, height, number)
* Mutators for all common variables
* A constructor that sets up all information common to both classes.


#### Skater
Class Description - This class manages Skaters. Skaters are players that can score goals, thus have related goal scoring stats.
They also have positions that do not include the goalie (G) position. These include right wing, left wing, center, and defence.

Methods - The methods of this class includes:
* A constructor that makes use of the Player constructor (no stats)
* A constructor that creates a Skater with existing stats
* Accessors for all Skater unique variables (see implementation details)
* Mutators for all Skater unique variables 
* `calcShotsPer` to calculate successful shots percentage
* `calcPoints`to calculate non powerplay points
* `calcPPPoints`to calculate  powerplay points


#### Goalie
Class Description -  This class manages Goalies. Goalies are players that CANNOT score goals. Instead they have stats including shots against, goals against, shutouts, minutes played, goals against averages, and save percentages.
They have the position of goalie (G). This is important because they can be identified by this trait.

Methods - The methods of this class includes:
* A constructor that makes use of the Player constructor (no stats)
* A constructor that creates a Goalie with existing stats
* Accessors for all Goalie unique variables (see implementation details)
* Mutators for all Goalie unique variables 
* `calcSavePer` to calculate successful save percentage
* `calcGAA`to calculate goals against average


### Player List
Class Description -  Provides a description of the class, detailed description of the encapsulated information, detailed description of the role of the class and its interaction, and the assumptions made regarding the design of the class.
The Player List class manages reading in players from a file, adding them to an Array List, making changes to that Array List (including adding and removing players), as well as saving the new player list into its own text file. 

Method Descriptions - 

### Menu
Class Description -  Provides a description of the class, detailed description of the encapsulated information, detailed description of the role of the class and its interaction, and the assumptions made regarding the design of the class.

Method Descriptions - 

## Implementation Details
Provides a full description of the internal state of the class and for all methods there is a plan for implementation or an algorithm provided.

### Skater
Player needs to store:
* name - String
* birth - String
* homeTown - String
* weight - String
* height - String
* pNum - String
* position - Enum
* goals - int
* assists - int
* ppGoals - int
* ppAssists - int
* shots - int
* shotsPer - double
* points - int
* ppPoints - int

#### Important Methods
* `ppPoints` Calculates the total points ppGoals + ppAssist
* `shotPer` Calculates the shots percentage by dividing (goals + ppGoals) by shots. 
* `points` Calculates total points goals + assists

### Goalie
Player List needs to store:
* name - String
* birth - String
* homeTown - String
* weight - String
* height - String
* pNum - String
* position - Enum
* shotsAgainst - int
* goalsAgainst - int
* shutouts - int
* minutes - int
* gAA - double
* savePer - double

#### Important Methods
* `gAA` Voals against * 60 minutes / minutes played
* `savePer` 1 - (goals against / shots against).

### Menu
Player List needs to store:
* A variable - type
* A variable - type 

#### Important Methods
* `method name` Method description
* `method name` Method description

